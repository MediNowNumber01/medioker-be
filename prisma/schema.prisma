generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Account {
  id          String      @id @default(cuid())
  fullName    String
  email       String      @unique
  password    String?
  role        Role        @default(USER)
  profilePict String?
  isVerified  Boolean     @default(false)
  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User?
  Admin       Admin?
  SuperAdmin  SuperAdmin?

  @@map("accounts")
}

model User {
  id        String    @id @default(cuid())
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  accountId      String          @unique
  account        Account         @relation(fields: [accountId], references: [id])
  user_addresses UserAddresses[]
  Forum          Forum[]
  Order          Order?
  Cart           Cart[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model Banner {
  id        String    @id @default(cuid())
  alt       String
  source    String
  linkTo    String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("banners")
}

model UserAddresses {
  id          String    @id @default(cuid())
  fullAddress String
  postalCode  String
  latitude    String
  longitude   String
  isPrimary   Boolean
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("user_addresses")
}

model Admin {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updateAt           DateTime  @updatedAt
  deleteAt           DateTime?
  adminRole          AdminRole
  validToAnswerForum Boolean   @default(false)

  // Relations
  accountId    String         @unique
  account      Account        @relation(fields: [accountId], references: [id])
  pharmacyId   String?
  pharmacy     Pharmacy?      @relation(fields: [pharmacyId], references: [id])
  ForumComment ForumComment[]
}

enum AdminRole {
  DOCTOR
  PHARMACIST
  CASHIER
}

model SuperAdmin {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id])

  @@map("super_admins")
}

model Pharmacy {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String
  slug           String    @unique
  picture        String
  isOpen         Boolean
  createdAt      DateTime  @default(now())
  detailLocation String
  lat            String
  lng            String
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  isMain         Boolean   @default(false)

  // Relations
  Admin Admin[]
  Order Order[]
  Stock Stock[]

  @@map("pharmacies")
}

model Stock {
  id        String    @id @default(cuid())
  quantity  Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  productId    String
  product      Product        @relation(fields: [productId], references: [id])
  pharmacyId   String
  pharmacy     Pharmacy       @relation(fields: [pharmacyId], references: [id])
  StockHistory StockHistory[]
  Cart         Cart[]
  OrderStock   OrderStock[]

  @@map("stocks")
}

model StockHistory {
  id             String @id @default(cuid())
  quantityBefore Float
  quantityAfter  Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id])

  @@map("stock_histories")
}

enum TypeHistory {
  TRANSACTION
  ADJUSTMENT
  RETURN
}

model Product {
  id                String    @id @default(cuid())
  name              String    @unique
  slug              String    @unique
  published         Boolean   @default(false)
  nameMIMS          String
  golongan          Golongan
  catCreate         CatCreate
  nomorEdar         String
  needsPrescription Boolean   @default(false)
  description       String
  composition       String
  dose              String
  sideEffects       String
  indication        String
  CreatedAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  // Relations
  ProductImage    ProductImage[]
  UnitProduct     UnitProduct[]
  ProductCategory ProductCategory[]
  Stock           Stock[]

  @@map("products")
}

enum Golongan {
  OBAT_UMUM
  OBAT_KERAS
  OBAT_BEBAS
  OBAT_PRESKIPSI
}

enum CatCreate {
  GENERIK
  NON_GENERIK
  HERBAL
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  color       String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  // Relations
  ProductCategory ProductCategory[]

  @@map("categories")
}

model ProductImage {
  id          String   @id @default(cuid())
  imageUrl    String
  isThumbnail Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model UnitProduct {
  id          String   @id @default(cuid())
  name        String
  isMain      Boolean  @default(false)
  weight      Float
  price       Float
  ratioToMain Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  Product   Product @relation(fields: [productId], references: [id])
  productId String
  Cart      Cart[]

  @@map("unit_products")
}

model ProductCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("product_categories")
}

model Forum {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  ForumComment ForumComment[]

  @@map("forums")
}

model ForumComment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  forumId String
  forum   Forum  @relation(fields: [forumId], references: [id])
  adminId String
  admin   Admin  @relation(fields: [adminId], references: [id])

  @@map("forum_comments")
}

model Order {
  id            String     @id @default(cuid())
  reciptUUID    String     @unique @default(uuid())
  paymentMethod String?
  paymentProof  String?
  productPrice  String
  deliveryPrice Float
  totalPrice    Float
  pickupCode    String?
  note          String?
  status        Status // enum type
  orderType     OrederType // enum type
  updateAt      DateTime   @updatedAt
  createAt      DateTime   @default(now())
  deletedAt     DateTime?

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  pharmacyId    String
  pharmacy      Pharmacy        @relation(fields: [pharmacyId], references: [id])
  Prescription  Prescription[]
  OrderActivity OrderActivity[]
  Delivery      Delivery?
  OrderStock    OrderStock[]

  @@map("order")
}

enum Status {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMATION
  RECIPT_CONFIRMATION
  USER_CONFIRMATION
  PROCESSING_ORDER
  DELIVERY
  COMPLETED
  CANCELED
  EXPIRED
  WAITING_FOR_PICKUP
  WAITING_FOR_REFUND
}

enum OrederType {
  GENERAL
  PRESCRIPTION
}

model Prescription {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  source    String

  // Relations
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("prescriptions")
}

model OrderStock {
  id                    String   @id @default(cuid())
  quantity_base_default Float
  product_unit_name     String
  quantity_unit         Float
  product_unit_weight   Float
  product_ratio         Float
  priceAtPurchase       Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id])

  @@map("order_products")
}

model OrderActivity {
  id        String    @id @default(cuid())
  status    Status
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("order_activities")
}

model Delivery {
  id          String    @id @default(cuid())
  name        String
  fullAddress String
  postalCode  String
  latitude    String
  longitude   String
  expedition  String
  deliveryFee Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("deliveries")
}

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Float

  // Relations
  userId  String
  user    User        @relation(fields: [userId], references: [id])
  stockId String
  stock   Stock       @relation(fields: [stockId], references: [id])
  unitId  String
  unit    UnitProduct @relation(fields: [unitId], references: [id])

  @@map("carts")
}
